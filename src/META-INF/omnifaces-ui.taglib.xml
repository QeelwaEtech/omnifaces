<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright 2012 OmniFaces.

   Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
   the License. You may obtain a copy of the License at

	   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
   an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
   specific language governing permissions and limitations under the License.
 -->
<facelet-taglib id="o"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
	version="2.0"
>
	<namespace>http://omnifaces.org/ui</namespace>

	<!-- Tree ===================================================================================================== -->

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:tree</code></strong> is an <code>UIComponent</code> that supports data binding to a tree
				of data objects represented by a <code>TreeModel</code> instance, which is the current value of this
				component itself (typically established via a <code>ValueExpression</code>. During iterative processing
				over the nodes of tree in the tree model, the object for the current node is exposed as a request
				attribute under the key specified by the <code>var</code> attribute. The node itself is exposed as a
				request attribute under the key specified by the <code>varNode</code> attribute.
				<p>
				Only children of type <code>TreeNode</code> are allowed and processed by this component.
				<p>
				This component does not have a renderer since it does not render any markup by itself. This allows the
				developers to have full control over the markup of the tree by declaring the appropriate JSF components
				or HTML elements in the markup. Here is a basic usage example:
				<pre>
&lt;o:tree value="#{bean.treeModel}" var="item" varNode="node"&gt;
  &lt;o:treeNode&gt;
    &lt;ul&gt;
      &lt;o:treeNodeItem&gt;
        &lt;li&gt;
          #{node.index} #{item.someProperty}
          &lt;o:treeInsertChildren /&gt;
        &lt;/li&gt;
      &lt;/o:treeNodeItem&gt;
    &lt;/ul&gt;
  &lt;/o:treeNode&gt;
&lt;/o:tree&gt;
				</pre>
			]]>
		</description>
		<tag-name>tree</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.Tree</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The current value of this component. As far only <code>TreeModel</code> is allowed as value.
				]]>
			</description>
			<name>value</name>
			<required>false</required>
			<type>java.lang.Object</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The name of the request attribute which exposes the wrapped data of the current node of the tree
					model.
				]]>
			</description>
			<name>var</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The name of the request attribute which exposes the current node of the tree model.
				]]>
			</description>
			<name>varNode</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:treeNode</code></strong> is an <code>UIComponent</code> that represents a single tree node
				within a parent <code>Tree</code> component. Within this component, the <code>var</code> attribute of
				the parent <code>Tree</code> component will expose the tree node. Each of its children is processed by
				<code>TreeNodeItem</code>.
				<p>
				The <code>level</code> attribute can be used to specify for which tree node level as obtained by
				<code>TreeModel#getLevel()</code> this component should render the children by
				<code>TreeNodeItem</code>. The root tree node has level 0.
			]]>
		</description>
		<tag-name>treeNode</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.TreeNode</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The tree node level to render the node children for. The root level is <code>0</code>.
				]]>
			</description>
			<name>level</name>
			<required>false</required>
			<type>java.lang.Integer</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:treeNodeItem</code></strong> is an <code>UIComponent</code> that represents a single child
				tree node within a parent <code>TreeNode</code> component. Within this component, the <code>var</code>
				attribute of the parent <code>Tree</code> component will expose the child tree node.
				<p>
				This component allows a child component of type <code>TreeInsertChildren</code> which indicates the
				place to insert the children of the current child tree node recursively by a <code>TreeNode</code>
				component associated with the children's level in the same parent <code>Tree</code> component.
			]]>
		</description>
		<tag-name>treeNodeItem</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.TreeNodeItem</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:treeInsertChildren</code></strong> is an <code>UIComponent</code> that represents the
				insertion point for the children of a parent tree node which is represented by
				<code>TreeNodeItem</code>.
				<p>
				This component does not allow any children.
			]]>
		</description>
		<tag-name>treeInsertChildren</tag-name>
		<component>
			<component-type>org.omnifaces.component.tree.TreeInsertChildren</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
	</tag>

	<tag>
		<description>
			This component includes the output from a resource located at the given path. This path can
			not extend outside of the current Servlet context. A resource is either a Servlet or a JSP
			page.
		</description>
		<tag-name>resourceInclude</tag-name>
		<component>
			<component-type>org.omnifaces.component.output.ResourceInclude</component-type>
		</component>
		 <attribute>
			<description>A String specifying the pathname to the resource</description>
			<name>path</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:onloadScript</code></strong> is an extension to <code>&lt;h:outputScript&gt;</code> which will be executed in the
				end of the HTML body (thus when all HTML elements are initialized in the HTML DOM tree) and will re-execute its
				script body on every ajax request. This is particularly useful if you want to re-execute a specific helper script
				to manipulate the HTML DOM tree, such as (re-)adding fancy tooltips, performing highlights, etcetera, also after
				changes in the HTML DOM tree on ajax responses.
				<p>
				You can put it anywhere in the view, it will always be relocated to the end of body.
				<pre>
&lt;o:onloadScript&gt;alert('OnloadScript is invoked!');&lt;/o:onloadScript&gt;
				</pre>
			]]>
		</description>
		<tag-name>onloadScript</tag-name>
		<component>
			<component-type>org.omnifaces.component.script.OnloadScript</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:highlight</code></strong> is a helper component which highlights all invalid {@link UIInput} components by adding
				an error style class to them. Additionally, it by default focuses the first invalid {@link UIInput} component. The
				<code>&lt;o:highlight /&gt;</code> component can be placed anywhere in the view, as long as there's only one of it.
				Preferably put it somewhere in the master template for forms.
				<pre>
&lt;h:form&gt;
  &lt;h:inputText value="#{bean.input1}" required="true" /&gt;
  &lt;h:inputText value="#{bean.input1}" required="true" /&gt;
  &lt;h:commandButton value="Submit" action="#{bean.submit}" /&gt;
&lt;/h:form&gt;
&lt;o:highlight /&gt;
				</pre>
				<p>
				The default error style class name is <tt>error</tt>. You need to specify a CSS style associated with the class
				yourself. For example,
				<pre>
.error {
  background-color: #fee;
}
				</pre>
				<p>
				You can override the default error style class by the <code>styleClass</code> attribute:
				<pre>
&lt;o:highlight styleClass="invalid" /&gt;
				</pre>
				<p>
				You can disable the default focus on the first invalid input element setting the <code>focus</code> attribute.
				<pre>
&lt;o:highlight styleClass="invalid" focus="false" /&gt;
				</pre>
			]]>
		</description>
		<tag-name>highlight</tag-name>
		<component>
			<component-type>org.omnifaces.component.script.Highlight</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The error style class which is to be applied on invalid inputs. Defaults to <tt>error</tt>.
				]]>
			</description>
			<name>styleClass</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Whether the first error element should gain focus. Defaults to <code>true</code>.
				]]>
			</description>
			<name>focus</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<p><strong>o:conditionalComment</strong> is an <code>UIComponent</code> which renders a conditional comment. Conditional 
				comments are an IE specific feature which enables the developer to (out)comment blocks of HTML depending on whether
				the client is using IE and if so even which version. They are often seen in combination with CSS stylesheets like so:
				<pre>
&lt;!--[if lte IE 7]&gt;
  &lt;link rel="stylesheet" href="ie6-ie7.css" /&gt;
&lt;![endif]--&gt;
				</pre>
				<p>However, Facelets renders them HTML-escaped and if <tt>javax.faces.FACELETS_SKIP_COMMENTS</tt> context param is
				set to <code>true</code> then it will even not be rendered at all. You would need to workaround this with an ugly
				<code>&lt;h:outputText escape="false"&gt;</code>.
				<pre>
&lt;h:outputText value="&amp;lt;!--[if lte IE 7]&amp;gt;&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;ie6-ie7.css&amp;quot; /&amp;gt;&amp;lt;![endif]--&amp;gt;" escape="false" /&gt;
				</pre>
				<p>This component is designed to solve this problem.
				<pre>
&lt;o:conditionalComment if="lte IE 7"&gt;
  &lt;link rel="stylesheet" href="ie6-ie7.css" /&gt;
&lt;/o:conditionalComment&gt;
				</pre>
				<p>Note that you cannot use this with <code>&lt;h:outputStylesheet&gt;</code> as it would implicitly be relocated as
				direct child of <code>&lt;h:head&gt;</code>.
			]]>
		</description>
		<tag-name>conditionalComment</tag-name>
		<component>
			<component-type>org.omnifaces.component.output.ConditionalComment</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>if</code> condition of the conditional comment. This is exactly the value you would use 
					in <code>&lt;!--[if ...]&gt;</code>, e.g. <code>if="lte IE 7"</code>.
				]]>
			</description>
			<name>if</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<!-- Validator ================================================================================================ -->

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:validateAllOrNone</code></strong> validates validates if at least ALL of the given <code>UIInput</code>
				components have been filled in or that NONE of the given <code>UIInput</code> components have been
				filled in. The default message is
				<blockquote>{0}: Please fill out all or none of those fields</blockquote>
				<hr>
				<h3>General usage of all multiple field validators</h3>
				<p>
				This validator must be placed inside the same <code>UIForm</code> as the <code>UIInput</code> components
				in question. The <code>UIInput</code> components must be referenced by a space separated collection of
				their client IDs in the <code>components</code> attribute. This validator can be placed anywhere in the
				form, but keep in mind that the components will be validated in the order as they appear in the form.
				So if this validator is been placed before all of the components, then it will be executed before any of
				the component's own validators. If this validator fails, then the component's own validators will not be
				fired. If this validator is been placed after all of the components, then it will be executed after any
				of the component's own validators. If any of them fails, then this validator will not be exeucted. It
				is not recommended to put this validator somewhere in between the referenced components as the resulting
				behaviour may be confusing. Put this validator either before or after all of the components, depending
				on how you would like to prioritize the validation.
				<pre>
&lt;o:validateMultipleFields id="myId" components="foo bar baz" /&gt;
&lt;h:message for="myId" /&gt;
&lt;h:inputText id="foo" /&gt;
&lt;h:inputText id="bar" /&gt;
&lt;h:inputText id="baz" /&gt;
				</pre>
				<p>
				In an invalidating case, all of the referenced components will be marked invalid and a faces message
				will be added on the client ID of this validator component. The default message can be changed by the
				<code>message</code> attribute. Any "{0}" placeholder in the message will be substituted with a comma
				separated string of labels of the referenced input components.
				<pre>
&lt;o:validateMultipleFields components="foo bar baz" message="{0} are wrong!" /&gt;
				</pre>
				<p>
				The faces message can also be shown for all of the referenced components using
				<code>showMessageFor="@all"</code>.
				<pre>
&lt;o:validateMultipleFields components="foo bar baz" message="This is wrong!" showMessageFor="@all" /&gt;
&lt;h:inputText id="foo" /&gt;
&lt;h:message for="foo" /&gt;
&lt;h:inputText id="bar" /&gt;
&lt;h:message for="bar" /&gt;
&lt;h:inputText id="baz" /&gt;
&lt;h:message for="baz" /&gt;
				</pre>
				<p>
				The <code>showMessageFor</code> attribute defaults to <code>@this</code>. Other values than
				<code>@this</code> or <code>@all</code> are not allowed.
				<p>
				The validator can be disabled by the <code>disabled</code> attribute. It accepts a request based EL expression.
				<pre>
&lt;o:validateMultipleFields components="foo bar baz" disabled="#{param.validationDisabled}" /&gt;
				</pre>
			]]>
		</description>
		<tag-name>validateAllOrNone</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateAllOrNone</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Whether the validation should be disabled or not. Defaults to <code>false</code>.
				]]>
			</description>
			<name>disabled</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:validateOneOrMore</code></strong> validates if at least ONE of the given <code>UIInput</code>
				components has been filled in. The default message is
				<blockquote>{0}: Please fill out at least one of those fields</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
			]]>
		</description>
		<tag-name>validateOneOrMore</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateOneOrMore</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Whether the validation should be disabled or not. Defaults to <code>false</code>.
				]]>
			</description>
			<name>disabled</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:validateEqual</code></strong> validates if ALL of the given <code>UIInput</code> components have the
				same value. The default message is
				<blockquote>{0}: Please fill out the same value for all of those fields</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
			]]>
		</description>
		<tag-name>validateEqual</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateEqual</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Whether the validation should be disabled or not. Defaults to <code>false</code>.
				]]>
			</description>
			<name>disabled</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:validateUnique</code></strong> validates if ALL of the given <code>UIInput</code> components have an
				unique value. The default message is
				<blockquote>{0}: Please fill out an unique value for all of those fields</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
			]]>
		</description>
		<tag-name>validateUnique</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateUnique</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Whether the validation should be disabled or not. Defaults to <code>false</code>.
				]]>
			</description>
			<name>disabled</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
	</tag>
	
	<tag>
		<description>
			<![CDATA[
				<strong>ValidateOrder</strong> validates if the values of the given <code>UIInput</code> components as specified in
				the <code>components</code> attribute are in the order as specified by the <code>type</code> attribute which accepts
				the following values:
				<ul>
				<li><code>lt</code> (default): from least to greatest, without duplicates.</li>
				<li><code>lte</code>: from least to greatest, allowing duplicates (equal values next to each other).</li>
				<li><code>gt</code>: from greatest to least, without duplicates.</li>
				<li><code>gte</code>: from greatest to least, allowing duplicates (equal values next to each other).</li>
				</ul>
				The default message is
				<blockquote>{0}: Please fill out the values of all those fields in order</blockquote>
				<p>
				For general usage instructions, refer <code>validateAllOrNone</code> tag documentation.
				<p>
				This validator has the additional requirement that the to-be-validated values must implement <code>Comparable</code>.
				This validator throws an <code>IllegalArgumentException</code> when one or more of the values do not implement it.
			]]>
		</description>
		<tag-name>validateOrder</tag-name>
		<component>
			<component-type>org.omnifaces.component.validator.ValidateOrder</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					The component identifier for this component. This value must be unique within the closest parent
					component that is a naming container.
				]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Flag indicating whether or not this component should be rendered (during Render Response Phase), or
					processed on any subsequent form submit. The default value for this property is true.
				]]>
			</description>
			<name>rendered</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The <code>ValueExpression</code> linking this component to a property in a backing bean.
				]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The ordering type, available values are "lt", "lte", "gt" and "gte", defaults to "lt".
				]]>
			</description>
			<name>type</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The space separated collection of client IDs of UI input components to be validated.
				]]>
			</description>
			<name>components</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The validator message to be shown on failure. Any "{0}" placeholder in the message will be
					substituted with a comma separated string of labels of the referenced input components.
				]]>
			</description>
			<name>message</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					The identifier for which this validator should show the message. Defaults to "@this" which is the
					validator component itself. Other available value is "@all" which will show the message for all of
					the referenced components.
				]]>
			</description>
			<name>showMessageFor</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Whether the validation should be disabled or not. Defaults to <code>false</code>.
				]]>
			</description>
			<name>disabled</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				The <code>&lt;o:validator&gt;</code> basically extends the <code>&lt;f:validator&gt;</code> tag family with the
				possibility to evaluate the value expression in all attributes on a per request basis instead of on a per view
				build time basis. This allows the developer to change the attributes on a per request basis, such as the
				<code>disabled</code> attribute.
				<pre>
&lt;o:validator validatorId="someValidatorId" disabled="#{param.disableValidation}" /&gt;
				</pre>
				<p>Note that not all available attributes are listed. This depends on the validator you're specifying.
				When you specify for example the standard <code>&lt;f:validateLongRange&gt;</code> by
				<code>validatorId="javax.faces.LongRange"</code>, then you'll be able to use all its attributes such as
				<code>minimum</code> and <code>maximum</code> as per its documentation, but then with the possibility to supply
				request based value expressions.
				<pre>
&lt;o:validator validatorId="javax.faces.LongRange" minimum="#{item.minimum}" maximum="#{item.maximum}" /&gt;
				</pre>
			]]>
		</description>
		<tag-name>validator</tag-name>
		<handler-class>org.omnifaces.taghandler.Validator</handler-class>
		<attribute>
			<description>
				<![CDATA[
					A ValueExpression that evaluates to an object that implements the javax.faces.validator.Validator 
					interface.
				]]>
			</description>
			<name>binding</name>
			<type>javax.faces.validator.Validator</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Validator identifier of the <code>Validator</code> to be created and registered.
				]]>
			</description>
			<name>validatorId</name>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					A boolean value enabling request based determination of whether or not this validator is enabled on
					the enclosing component.
				]]>
			</description>
			<name>disabled</name>
			<type>java.lang.Boolean</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				The <code>&lt;o:converter&gt;</code> basically extends the <code>&lt;f:converter&gt;</code> tag family with the
				possibility to evaluate the value expression in all attributes on a per request basis instead of on a per view
				build time basis. This allows the developer to change the attributes on a per request basis.
				<p>
				When you specify for example the standard <code>&lt;f:convertDateTime&gt;</code> by
				<code>converterId="javax.faces.DateTime"</code>, then you'll be able to use all its attribuces such as
				<code>pattern</code> and <code>locale</code> as per its documentation, but then with the possibility to supply
				request based value expressions.
				<pre>
&lt;o:converter converterId="javax.faces.DateTime" pattern="#{item.pattern}" locale="#{item.locale}" /&gt;
				</pre>
			]]>
		</description>
		<tag-name>converter</tag-name>
		<handler-class>org.omnifaces.taghandler.Converter</handler-class>
		<attribute>
			<description>
				<![CDATA[
					A ValueExpression that evaluates to an object that implements the javax.faces.convert.Converter 
					interface.
				]]>
			</description>
			<name>binding</name>
			<type>javax.faces.convert.Converter</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
					Converter identifier of the <code>Converter</code> to be created and registered.
				]]>
			</description>
			<name>converterId</name>
			<type>java.lang.String</type>
		</attribute>
	</tag>
	
	<tag>
		<description>
				<![CDATA[
					<strong><code>o:viewParam</code></strong> is a component that extends the standard viewParam and provides a stateless
	 				mode of operation and a default for the label atrribute. When the label attribute is omitted, the name
	 				attribute will be used instead.
	 				<p>
	 				The standard UIViewParameter implementation calls the model setter again after postback. This is not always desired when being
					bound to a view scoped beans and can lead to performance problems when combined with an expensive converter.
					<p>
					To solve this, this component by default stores the submitted value as a component property instead of in the model (and thus
					in the view state in case the binding is to a view scoped bean).
					<p>
					You can use it the same way as <code>&lt;f:viewParam&gt;</code>, you only need to change <code>f:</code> by
					<code>o:</code>.
				]]>
		</description>
		<tag-name>viewParam</tag-name>
		<component>
			<component-type>org.omnifaces.component.input.ViewParam</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
	                The name of the request parameter from which the value for this component
	                is retrieved on an initial request or to override the stored value on a
	                postback.
		        ]]>
			</description>
			<name>name</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                Converter instance registered with this component.
	            ]]></description>
			<name>converter</name>
			<required>false</required>
			<type>javax.faces.convert.Converter</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                A ValueExpression enabled attribute that, if present, will be
	                used as the text of the converter message, replacing any message
	                that comes from the converter.
	            ]]>
			</description>
			<name>converterMessage</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                The component identifier for this component. This value must be
	                unique within the closest parent component that is a naming
	                container.
	            ]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                Flag indicating that the user is required to provide a submitted
	                value for this input component. This component extends the behavior of
	                this by only making this required for a non-faces request.
	            ]]>
			</description>
			<name>required</name>
			<required>false</required>
			<type>boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                A ValueExpression enabled attribute that, if present, will be
	                used as the text of the validation message for the "required"
	                facility, if the "required" facility is used.
	            ]]>
			</description>
			<name>requiredMessage</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                MethodExpression representing a validator method that will be
	                called
	                during Process Validations to perform correctness checks on the
	                value of this component. The expression must evaluate to a
	                public
	                method that takes FacesContext, UIComponent, and Object
	                parameters,
	                with a return type of void.
	            ]]>
			</description>
			<name>validator</name>
			<required>false</required>
			<method-signature>void validate(javax.faces.context.FacesContext,
				javax.faces.component.UIComponent, java.lang.Object)
			</method-signature>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                A ValueExpression enabled attribute that, if present, will be
	                used as the text of the validator message, replacing any
	                message that comes from the validator.
	            ]]>
			</description>
			<name>validatorMessage</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                A ValueExpression to which the value of the request parameter, as
	                determined by the name attribute, is bound. The resolved value of this
	                expression is used when encoding the view parameter into a bookmarkable link or
	                redirect URL with view parameter encoding enabled. If this attribute is omitted,
	                the value of the request parameter will instead be the local value of the
	                UIViewParameter.
	            ]]>
            </description>
			<name>value</name>
			<required>false</required>
			<type>java.lang.Object</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                <p>
	
	                MethodExpression representing a value change listener method
	                that will be notified when a new value has been set for this
	                input component. The expression must evaluate to a public
	                method that takes a <code>ValueChangeEvent</code>
	                parameter,
	                with a return type of void, or
	                to a public method that takes no arguments with a return type
	                of void. In the latter case, the method has no way of easily
	                knowing what the new value is, but this can be useful in cases
	                where a notification is needed that "this value
	                changed".
	
	                </p>
	            ]]>
			</description>
			<name>valueChangeListener</name>
			<required>false</required>
			<method-signature>void
				valueChange(javax.faces.event.ValueChangeEvent)
			</method-signature>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                The maximum number of characters that may
	                be entered in this field.
	            ]]>
			</description>
			<name>maxlength</name>
			<required>false</required>
			<type>int</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                The ValueExpression linking this component to a property in a
	                backing bean
	            ]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                If present, this attribute refers to the value of one of the exposed
	                attached objects within the composite component inside
	                of which this tag is nested.
	            ]]>
            </description>
			<name>for</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>

	<tag>
		<description>
			<![CDATA[
				<strong><code>o:methodParam</code></strong> is a tag handler that can be used to pass a method expression
				into a Facelets tag.
				<p>
				By default this is not possible, and the expression that's intended to be a method expression will be created and
				made available as a value expression. This handler should be placed inside a Facelets tag as follows:				
				<pre>
&lt;ui:composition
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:o="http://omnifaces.org/ui"
&gt;
	&lt;o:methodParam name="method" value="#{action}"/&gt;
	
	&lt;h:commandButton value="test" action="#{method}" /&gt;
		
&lt;/ui:composition&gt;
				</pre>
				<p>
				Assuming the above is a tag called <code>actionmethod</code> in the namespace <code>test</code>, a method can be passed into it
				as follows:				
				<pre>				
&lt;test:actionmethod action="#{methodParamBean.doAction}" /&gt;
				</pre>
				<p>				
				In case a method with no parameters is passed that is to be used as an action listener with no parameters, then the component
				using this method unfortunely has to be wrapped by a component that puts the method in request scoped (with nested visibility),
				e.g. by using <code>ui:repeat</code> as follows:				
				<pre>
&lt;ui:repeat var="method" value="#{method}"&gt;
	&lt;h:commandButton value="test" actionListener="#{method}" /&gt;
&lt;/ui:repeat&gt;
				</pre>
				<p>
				Using modern EL implementations, this is not needed in case the EL expression references the method using explicit parenthesis,
				e.g. <code>#{methodParamBean.doAction()}</code>							
			]]>
		</description>
		<tag-name>methodParam</tag-name>
		<handler-class>org.omnifaces.taghandler.MethodParam</handler-class>
		<attribute>
			<description>
				<![CDATA[
	               Name under which the method expression will be made available to EL, scoped to the body of the Facelets tag.
	            ]]>
            </description>
			<name>name</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	               The value expression that is to be interpreted and invoked as a method expression. This is typically the
	               name of the parameter by which a value is passed into the Facelets tag.
	            ]]>
            </description>
			<name>value</name>
			<required>true</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>
	
	<tag>
		<description>
				<![CDATA[
					<strong>ComponentIdParam</strong> is a component that allows component ids to be provided as request parameters
 					causing only components with matching ids to be rendered.
 					<p>
 					Both simple component ids as well as client ids are supported. Components can be rendered without their parents
 					having to be rendered. As such, e.g. single rows appearing in a table can be rendered without any of the
 					surrounding markup appearing in the response.
 					<p>
 					The intended usage of this component is to allow client-side scripts to request markup for specific components
 					via a GET request (as opposed to AJAX based post-backs).
					<p>
					This component is used in the same way view parameters are and needs to be put into the metadata section of a
					Facelet.
				]]>
		</description>
		<tag-name>componentIdParam</tag-name>
		<component>
			<component-type>org.omnifaces.component.input.ComponentIdParam</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
	                The name of the request parameters from which the values are retrieved on an initial request that
	                represent component ids of those components from which the markup should appear in the response (i.e. which 
	                should be rendered)
		        ]]>
			</description>
			<name>componentIdName</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                The name of the request parameters from which the values are retrieved on an initial request that
	                represent client ids of those components from which the markup should appear in the response (i.e. which 
	                should be rendered)
		        ]]>
			</description>
			<name>clientIdName</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                Whether children of the components identified by <code>clientIdName</code> or
	                <code>componentIdName</code> are rendered in addition to the component itself.
	                Defaults to <code>true</code>
		        ]]>
			</description>
			<name>renderChildren</name>
			<required>false</required>
			<type>java.lang.Boolean</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                The component identifier for this component. This value must be
	                unique within the closest parent component that is a naming
	                container.
	            ]]>
			</description>
			<name>id</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
		<attribute>
			<description>
				<![CDATA[
	                The ValueExpression linking this component to a property in a
	                backing bean
	            ]]>
			</description>
			<name>binding</name>
			<required>false</required>
			<type>javax.faces.component.UIComponent</type>
		</attribute>
	</tag>

	<tag>
        <description>
        	<![CDATA[
	        	<strong><code>o:outputLabel</code></strong> is a component that extends the standard outputLabel and provides extra support for
	 			automatically setting its value as the label of the component identified by its <code>for</code> attribute.
	        	<p>
	            It renders an HTML "label" element. If a "for" attribute is specified, the component specified by the value of the "for"
	            attribute is queried for its client id, which is then rendered as the value of the "for" attribute of the HTML label element. 
             ]]>           
        </description>
        <tag-name>outputLabel</tag-name>
        <component>
            <component-type>org.omnifaces.component.output.OutputLabel</component-type>
        </component>
        <attribute>
            <description>
                Converter instance registered with this component.
            </description>
            <name>converter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                The value that will be rendered as the content of the HTML label element. If the for attribute
                is specified the component identified by it will have its label attribute set to this value.
                (both literals and value expressions are supported)
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Object</type>
        </attribute>
        <attribute>
            <description>
                Access key that, when pressed, transfers focus
                to this element.
            </description>
            <name>accesskey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating that characters that are sensitive
                in HTML and XML markup must be escaped. If omitted, this
                flag is assumed to be "true".
            </description>
            <name>escape</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                Client identifier of the component for which this element
                is a label. The label attribute of that component will be set
                to the value of this component.
            </description>
            <name>for</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
            <name>lang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when this element loses focus.
            </description>
            <name>onblur</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
            <name>onclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
            <name>ondblclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when this element receives focus.
            </description>
            <name>onfocus</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
            <name>onkeydown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
            <name>onkeypress</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                released over this element.
            </description>
            <name>onkeyup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
            <name>onmousedown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
            <name>onmousemove</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
            <name>onmouseout</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
            <name>onmouseover</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
            <name>onmouseup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Position of this element in the tabbing order
                for the current document. This value must be
                an integer between 0 and 32767.
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
            <name>title</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    
    <tag>
        <description>
        	<![CDATA[
        		<strong>Form</strong> is a component that extends the standard h:form and provides a way to keep view parameters
 				in the request URL after a post-back.
             ]]>           
        </description>
        <tag-name>form</tag-name>
        <component>
            <component-type>org.omnifaces.component.input.Form</component-type>
        </component>
        <attribute>
            <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
         <attribute>
            <description>
                Whether to include view parameters in the action URI.
            </description>
            <name>includeViewParams</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating whether or not this form should prepend its id
                to its descendent's id during the clientId generation process.
                If this flag is not set, the default value is true.
            </description>
            <name>prependId</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                List of content types that a server processing this form
                will handle correctly
            </description>
            <name>accept</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                List of character encodings for input data
                that are accepted by the server processing
                this form.
            </description>
            <name>acceptcharset</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Content type used to submit the form to the server. If not
                specified, the default value is
                "application/x-www-form-urlencoded".
            </description>
            <name>enctype</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
            <name>lang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
            <name>onclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
            <name>ondblclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
            <name>onkeydown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
            <name>onkeypress</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                released over this element.
            </description>
            <name>onkeyup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
            <name>onmousedown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
            <name>onmousemove</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
            <name>onmouseout</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
            <name>onmouseover</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
            <name>onmouseup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when this form is reset.
            </description>
            <name>onreset</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when this form is submitted.
            </description>
            <name>onsubmit</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Name of a frame where the response
                retrieved after this form submit is to
                be displayed.
            </description>
            <name>target</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
            <name>title</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
    
	<tag>
		<description>
	       	<![CDATA[
	       		<strong>Cache</strong> is a component that initially renders the output of its children into a buffer 
	       		instead of to the response. This output is then inserted into a cache and on subsequent requests the
	       		content retrieved from the cache is used.
	       		<p>
	       		By default the viewid concatenated to the component id via an underscore is used as the cache key.
	       		
	       		WIP implementation: support for scopes, cache providers, and some common settings per
	       		instance (LRU, TTL) still need to be implemented.
			]]>           
		</description>
		<tag-name>cache</tag-name>
		<component>
			<component-type>org.omnifaces.component.output.Cache</component-type>
		</component>
		<attribute>
			<description>
				<![CDATA[
					Optional key used to store content in the cache. If no key is specified, a key is calculated
					based on the client Id of this component.
					<p>
					While auto-generated keys can be convenient, note that in the face of dynamic behavior on a view the
					id of a component and thus the cache key can change in ways that are difficult to predict.
					<p>
					Keys are relative to the scope for which they are defined, meaning a key "foo" for the a session scoped
					cache will not conflict with a key of the same name for an application scoped cache.
				 ]]>
            </description>
			<name>key</name>
			<required>false</required>
			<type>java.lang.String</type>
		</attribute>
	</tag>
    

</facelet-taglib>